set.seed(99999)
if (!require(mvtnorm)) {
  install.packages("mvtnorm")
  library(mvtnorm)
}
if (!require(invgamma)) {
  install.packages("invgamma")
  library(invgamma)
}
if (!require(sna)) {
  install.packages("sna")
  library(sna)
}
if (!require(coda)) {
  install.packages("coda")
  library(coda)
}
if (!require(truncnorm)) {
  install.packages("truncnorm")
  library(truncnorm)
}



itl=500
medianbeta_m = matrix(0,nrow=3,ncol=itl)
medianzeta_m = matrix(0,nrow=4,ncol=itl)
medianSigma_v = c()
medianomega_v = c()
medianRho_v = c()
varRho_v = c()
coverageRho = 0
medianalpha_v = c()
varalpha_v = c()
coveragealpha = 0
Rate = c()
lb_r_v = c()
ub_r_v = c()
lb_a_v = c()
ub_a_v = c()

for (k in 1:itl){
  
  ################
  #Generating the data
  #level 2 model
  node=50 
  rho=0.2 #network autocorrelation parameter
  ddensity=0.2 #network density
  X=matrix(rnorm(node*3),ncol=3)
  BBeta=matrix(c(1,1.5,2),nrow =3)
  oomega=1
  aalpha=2
  Tao=matrix(rnorm(node, mean = 0, sd = sqrt(oomega)),ncol = 1)
  W=rgraph(node, m=1, tprob=ddensity, mode="graph", diag = F, replace=FALSE,
           tielist=NULL, return.as.edgelist= F )
  
  W=t(apply(W, 1, function(x) (x/sum(x))))
  
  W[which(is.na(W))]=1/(node-1)
  
  diag(W)<-0
  
  

  DDelta= solve(diag(x=1,nrow=node)-rho*W)%*%(X%*%BBeta+Tao)
  ####Level 1 model
  Numpat=30 
  N = node*Numpat
  B = matrix(0,nrow = N,ncol = node)
  for (i in 1:node){
    B[((i-1)*Numpat+1):(i*Numpat),i]=1
  }
  ssigma=1
  epi=matrix(rnorm(N, mean=0, sd=sqrt(ssigma)),ncol=1)
  
  Z=cbind(1,matrix(rnorm(N*3),ncol=3))
  ZZeta=matrix(c(0.5,1,1.5,2),nrow=4)
  y=Z%*%ZZeta+B%*%(DDelta+aalpha*W%*%DDelta)+epi
  
  # ordered eigenvalues of W
  Lamda = c(sort(eigen(W)$values, decreasing = T))
  ######
  #MCMC
  num=20000
  Rho = rep(0, num)
  Sigma = rep(0, num)
  omega = rep(0, num)
  Alpha = rep(0, num)
  zetamt = matrix(0, 4 , num)
  betamt = matrix(0, 3, num)
  detamt = matrix(0, node, num)
  Rho[1]=rho
  Sigma[1]=ssigma
  omega[1]=oomega
  Alpha[1]=aalpha
  zetamt[,1]=ZZeta
  betamt[,1]=BBeta
  detamt[,1]=DDelta
  count = 0
  i = 2
  while(i<=num){
    
    Rho[i]=rnorm(1, mean=(t(detamt[,i-1])%*%t(W)%*%(detamt[,i-1]-X%*%betamt[,i-1]))/(omega[i-1]*sum(Lamda^2)+t(detamt[,i-1])%*%t(W)%*%W%*%detamt[,i-1]),
                 sd=1*sqrt(omega[i-1]/(omega[i-1]*sum(Lamda^2)+t(detamt[,i-1])%*%t(W)%*%W%*%detamt[,i-1]))
    )
    
    proportion =(((1/max(Lamda)-Rho[i-1])*(Rho[i-1]-1/min(Lamda)))/((1/max(Lamda)-Rho[i])*(Rho[i]-1/min(Lamda))))*abs(det(diag(1,node)-Rho[i]*W)/det(diag(1,node)-Rho[i-1]*W))*exp(
      -1/(2*omega[i-1])*t((diag(1,node)-Rho[i]*W)%*%detamt[,i-1]-X%*%betamt[,i-1])%*%((diag(1,node)-Rho[i]*W)%*%detamt[,i-1]-X%*%betamt[,i-1])+
        1/(2*omega[i-1])*t((diag(1,node)-Rho[i-1]*W)%*%detamt[,i-1]-X%*%betamt[,i-1])%*%((diag(1,node)-Rho[i-1]*W)%*%detamt[,i-1]-X%*%betamt[,i-1])
      -1/2*((Rho[i-1]-(t(detamt[,i-1])%*%t(W)%*%(detamt[,i-1]-X%*%betamt[,i-1]))/(omega[i-1]*sum(Lamda^2)+t(detamt[,i-1])%*%t(W)%*%W%*%detamt[,i-1]))^2/(omega[i-1]/(omega[i-1]*sum(Lamda^2)+t(detamt[,i-1])%*%t(W)%*%W%*%detamt[,i-1])))+
        1/2*((Rho[i]-(t(detamt[,i-1])%*%t(W)%*%(detamt[,i-1]-X%*%betamt[,i-1]))/(omega[i-1]*sum(Lamda^2)+t(detamt[,i-1])%*%t(W)%*%W%*%detamt[,i-1]))^2/(omega[i-1]/(omega[i-1]*sum(Lamda^2)+t(detamt[,i-1])%*%t(W)%*%W%*%detamt[,i-1])))
    )
    
    proportion = min(1, Re(proportion))
    
    if ((runif(1) > Re(proportion))){
      Rho[i]=Rho[i-1]
      count = count+1
    }
    
    Sigma[i] = rinvgamma(n=1, shape = (N-1)/2, rate = t(y-Z%*%zetamt[,i-1]-B%*%(detamt[,i-1]+Alpha[i-1]*W%*%detamt[,i-1]))%*%(y-Z%*%zetamt[,i-1]-B%*%(detamt[,i-1]+Alpha[i-1]*W%*%detamt[,i-1]))/2
    )
    omega[i] = rinvgamma(n=1, shape = (node-1)/2, rate = t((diag(1,node)-Rho[i]*W)%*%detamt[,i-1]-X%*%betamt[,i-1])%*%((diag(1,node)-Rho[i]*W)%*%detamt[,i-1]-X%*%betamt[,i-1])/2
    )
    betamt[,i] = rmvnorm(1, mean = solve(t(X)%*%X)%*%t(X)%*%(diag(1,node)-Rho[i]*W)%*%detamt[,i-1],
                         sigma = solve(t(X)%*%X)*omega[i])
    
    zetamt[,i] = rmvnorm(1, mean = solve(t(Z)%*%Z)%*%t(Z)%*%(y-B%*%(detamt[,i-1]+Alpha[i-1]*W%*%detamt[,i-1])), sigma = solve(t(Z)%*%Z)*Sigma[i])
    
    
    Kk = y-Z%*%zetamt[,i]-B%*%detamt[,i-1]
    Bb = B%*%W%*%detamt[,i-1]
    
    Alpha[i]=rnorm(1, mean = (t(Bb)%*%Kk)/(t(Bb)%*%Bb), sd = sqrt(Sigma[i]/(t(Bb)%*%Bb)))
    
    
    Zz = y-Z%*%zetamt[,i]
    Gg = B%*%(diag(1,node)+Alpha[i]*W)
    H = (sqrt(Sigma[i])/sqrt(omega[i]))*(diag(1,node)-Rho[i]*W)
    DeT = (sqrt(Sigma[i])/sqrt(omega[i]))*X%*%betamt[,i]
    D = t(H)%*%H+t(Gg)%*%Gg
    C = (t(DeT)%*%H+t(Zz)%*%Gg)
    
    detamt[,i] = rmvnorm(1, mean = solve(D)%*%t(C), sigma=Sigma[i]*solve(D)
    )
    
    
    i = i+1
    
  }
  
  medianbeta = apply(betamt[,-(1:2000)],MARGIN=1, FUN=median)
  medianzeta = apply(zetamt[,-(1:2000)], MARGIN = 1, FUN = median)
  
  medianbeta_m[,k] = medianbeta
  medianzeta_m[,k] = medianzeta
  medianSigma_v[k] = median(Sigma[-(1:2000)])
  medianomega_v[k] = median(omega[-(1:2000)])
  medianRho_v[k] = median(Rho[-(1:2000)])
  varRho_v[k] = var(Rho[-(1:2000)])
  medianalpha_v = median(Alpha[-(1:2000)])
  varalpha_v = var(Alpha[-(1:2000)])
  lb_r=quantile(Rho[-(1:2000)],0.025)
  ub_r=quantile(Rho[-(1:2000)],0.975)
  lb_r_v = c(lb_r_v,lb_r)
  ub_r_v = c(ub_r_v,ub_r)
  
  lb_a=quantile(Alpha[-(1:2000)],0.025)
  ub_a=quantile(Alpha[-(1:2000)],0.975)
  lb_a_v = c(lb_a_v,lb_a)
  ub_a_v = c(ub_a_v,ub_a)
  
  if(rho<=ub_r & rho>=lb_r){
    coverageRho = coverageRho+1
  }
  
  if(aalpha<=ub_a & aalpha>=lb_a){
    coveragealpha = coveragealpha+1
  }
  
  Rate[k]<-(num-count-1)/(num-1)

  cat("k = ", k,"\n")

}
apply(medianbeta_m,MARGIN=1, FUN=mean)

apply(medianzeta_m,MARGIN=1, FUN=mean)

mean(medianSigma_v)

mean(medianomega_v)

mean(medianRho_v)

mean(medianRho_v)-rho

mean(medianalpha_v)

mean(medianalpha_v)-aalpha

sum((medianRho_v-rho)^2)/itl

sum((medianalpha_v-aalpha)^2)/itl

coverageRho/itl

coveragealpha/itl

mean(lb_r_v)

mean(ub_r_v)

mean(ub_r_v)-mean(lb_r_v)

mean(lb_a_v)

mean(ub_a_v)

mean(ub_a_v)-mean(lb_a_v)
